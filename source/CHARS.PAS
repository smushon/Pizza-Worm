unit chars;
interface
uses crt,graph,mgfx;
type
 let=array[1..8,1..8] of 0..1;
 et=1..8;
 dt=0..2000;
const
ar:array[32..95] of let=
     (
      ((0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,1,1,0,0,0),
       (0,0,1,1,1,1,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,1,1,0,0,0)),
      ((0,1,0,0,1,0,0,0),
       (0,0,1,0,0,1,0,0),
       (0,0,0,1,0,0,1,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (1,1,1,1,1,1,1,1),
       (0,0,1,0,0,0,1,0),
       (0,1,0,0,0,1,0,0),
       (1,1,1,1,1,1,1,1),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,0,0,0)),
      ((0,1,1,1,1,1,1,0),
       (1,0,0,0,1,0,0,1),
       (1,0,0,0,1,0,0,0),
       (0,1,1,1,1,1,1,0),
       (0,0,0,0,1,0,0,1),
       (1,0,0,0,1,0,0,1),
       (1,0,0,0,1,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((1,1,1,0,0,0,0,1),
       (1,0,1,0,0,0,1,0),
       (1,1,1,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,1,1,1),
       (0,1,0,0,0,1,0,1),
       (1,0,0,0,0,1,1,1)),
      ((0,1,1,1,1,0,0,0),
       (0,1,0,0,1,0,0,0),
       (0,0,1,1,0,0,0,0),
       (0,0,1,1,0,0,0,0),
       (0,1,0,0,1,0,0,1),
       (1,0,0,0,0,1,1,0),
       (1,0,0,0,0,1,1,0),
       (0,1,1,1,1,0,0,1)),
      ((0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,0,1,0,0,0)),
      ((0,0,0,1,0,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0)),
      ((0,0,0,0,0,0,0,0),
       (0,1,0,0,1,0,1,0),
       (0,0,1,0,1,1,0,0),
       (0,1,1,1,1,1,1,0),
       (0,0,0,1,1,0,0,0),
       (0,0,1,0,1,1,0,0),
       (0,1,0,0,1,0,1,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,0,0,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,1,1,1,1,1,1,0),
       (0,1,1,1,1,1,1,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0)),
      ((0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,1,1,1,1,1,1,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,1,0,0,0)),
      ((0,0,0,0,0,0,0,1),
       (0,0,0,0,0,0,1,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,1,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0)),
      ((0,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,1,1),
       (1,0,0,0,0,1,0,1),
       (1,0,0,0,1,0,0,1),
       (1,0,0,1,0,0,0,1),
       (1,0,1,0,0,0,0,1),
       (1,1,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((0,0,0,0,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,1,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,1,1,1,1,1,1,1)),
      ((0,0,1,1,1,1,1,0),
       (0,1,0,0,0,0,1,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,1,0,0,0,0,0,0),
       (0,1,1,1,1,1,1,1)),
      ((0,1,1,1,1,1,1,1),
       (0,0,0,0,0,0,1,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,1,0,0),
       (0,0,0,0,0,0,1,0),
       (0,1,0,0,0,0,0,1),
       (0,1,0,0,0,0,0,1),
       (0,0,1,1,1,1,1,0)),
      ((1,0,0,0,0,1,0,0),
       (1,0,0,0,0,1,0,0),
       (1,0,0,0,0,1,0,0),
       (1,1,1,1,1,1,1,1),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0)),
      ((1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,0),
       (0,0,0,0,0,0,0,1),
       (0,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((0,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((1,1,1,1,1,1,1,1),
       (0,0,0,0,0,0,0,1),
       (0,0,0,0,0,0,1,0),
       (0,0,1,1,1,1,1,1),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,1,0,0,0,0,0,0)),
      ((0,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((0,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0),
       (0,0,0,0,0,0,0,1),
       (0,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0)),
      ((0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0)),
      ((0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,1,0,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,1),
       (0,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,1),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,1,0,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,0,1,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,1,1,0,0,0),
       (0,0,1,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,1,0,0,0,0)),
      ((0,1,1,1,1,1,1,0),
       (1,0,0,1,1,0,1,1),
       (1,0,1,0,0,1,0,1),
       (1,0,1,0,0,1,0,1),
       (1,0,1,0,0,1,0,1),
       (1,0,0,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((0,0,0,1,1,0,0,0),
       (0,0,1,0,0,1,0,0),
       (0,1,0,0,0,0,1,0),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1)),
      ((1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,0)),
      ((1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,1)),
      ((1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,0)),
      ((1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,1)),
      ((1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0)),
      ((0,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,1,1,1,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1)),
      ((0,1,1,1,1,1,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,1,1,1,1,1,0,0)),
      ((0,0,1,1,1,1,1,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,1,0,0,1,0,0,0),
       (0,1,0,0,1,0,0,0),
       (0,0,1,1,0,0,0,0)),
      ((0,1,0,0,0,0,1,0),
       (0,1,0,0,0,0,1,0),
       (0,1,0,0,0,1,0,0),
       (0,1,1,1,1,1,0,0),
       (0,1,0,0,0,1,0,0),
       (0,1,0,0,0,0,1,0),
       (0,1,0,0,0,0,0,1),
       (0,1,0,0,0,0,0,1)),
      ((1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,0)),
      ((1,0,0,0,0,0,0,1),
       (1,1,0,0,0,0,1,1),
       (1,0,1,0,0,1,0,1),
       (1,0,0,1,1,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1)),
      ((1,0,0,0,0,0,0,1),
       (1,1,0,0,0,0,0,1),
       (1,0,1,0,0,0,0,1),
       (1,0,0,1,0,0,0,1),
       (1,0,0,0,1,0,0,1),
       (1,0,0,0,0,1,0,1),
       (1,0,0,0,0,0,1,1),
       (1,0,0,0,0,0,0,1)),
      ((0,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0)),
      ((0,1,1,1,1,1,0,0),
       (1,0,0,0,0,0,1,0),
       (1,0,0,0,0,0,1,0),
       (1,0,0,0,0,0,1,0),
       (1,0,0,0,1,0,1,0),
       (1,0,0,0,0,1,1,0),
       (1,0,0,0,0,0,1,0),
       (0,1,1,1,1,1,0,1)),
      ((1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,0),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1)),
      ((0,1,1,1,1,1,1,1),
       (1,0,0,0,0,0,0,0),
       (1,0,0,0,0,0,0,0),
       (0,1,1,1,1,1,1,0),
       (0,0,0,0,0,0,0,1),
       (0,0,0,0,0,0,0,1),
       (0,0,0,0,0,0,0,1),
       (1,1,1,1,1,1,1,0)),
      ((1,1,1,1,1,1,1,1),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,1,0,0,0,0)),
      ((1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,1,1,1,1,1,0)),
      ((1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (0,1,0,0,0,0,1,0),
       (0,0,1,0,0,1,0,0),
       (0,0,0,1,1,0,0,0)),
      ((1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,0,0,0,0,1),
       (1,0,0,1,1,0,0,1),
       (1,0,1,0,0,1,0,1),
       (1,1,0,0,0,0,1,1),
       (1,0,0,0,0,0,0,1)),
      ((1,0,0,0,0,0,0,1),
       (0,1,0,0,0,0,1,0),
       (0,0,1,0,0,1,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,1,0,0,1,0,0),
       (0,1,0,0,0,0,1,0),
       (1,0,0,0,0,0,0,1)),
      ((1,0,0,0,0,0,0,1),
       (0,1,0,0,0,0,1,0),
       (0,0,1,0,0,1,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0),
       (0,0,0,1,1,0,0,0)),
      ((1,1,1,1,1,1,1,1),
       (0,0,0,0,0,0,1,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,1,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,1)),
      ((0,0,1,1,1,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,1,1,1,0,0,0)),
      ((1,0,0,0,0,0,0,0),
       (0,1,0,0,0,0,0,0),
       (0,0,1,0,0,0,0,0),
       (0,0,0,1,0,0,0,0),
       (0,0,0,0,1,0,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,0,1,0),
       (0,0,0,0,0,0,0,1)),
      ((0,0,0,1,1,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,0,0,1,0,0),
       (0,0,0,1,1,1,0,0)),
      ((0,0,0,1,1,0,0,0),
       (0,0,1,0,0,1,0,0),
       (0,1,0,0,0,0,1,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0)),
      ((0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (0,0,0,0,0,0,0,0),
       (1,1,1,1,1,1,1,1))
     );
procedure draw2(l:char;px,py:integer;col:byte);
{draw char dont jump a line when out of space}
procedure present(st:string;px,py:integer;col:byte);
{present a string}
function num2st(num:integer):string;
{integer to string}
procedure bck(px,py:integer);
{del char in starting coordinates (px,py)}
function getst(px,py:integer;s,col:byte;d:dt):string;
{returns writed string up to s chars}
function getnum(px,py:integer;s,col:byte;d:dt):integer;
{enables to write only digits and returns the number}
implementation
procedure draw2(l:char;px,py:integer;col:byte);
 var
  i,j:et;
 begin
 if ord(l)>96 then l:=chr(ord(l)-32);
 for i:=1 to 8 do
  for j:=1 to 8 do
   if ar[ord(l)][j,i]=1 then pxl(i+px-1,j+py-1,col);
 end;
procedure present(st:string;px,py:integer;col:byte);
 var
  l,i:byte;
 begin
 l:=length(st);
 for i:=1 to l do
  begin
  draw2(st[i],px,py,col);
  px:=px+9;
  end;
 end;
function num2st(num:integer):string;
 var
  st:string;
  t:integer;
  i,l:1..5;
 begin
 l:=1;
 t:=num;
 while t>9 do
  begin
  l:=l+1;
  t:=t div 10;
  end;
 st:='';
 for i:=l downto 1 do
  begin
  insert(chr((num mod 10)+48),st,1);
  num:=num div 10;
  end;
 num2st:=st;
 end;
procedure bck(px,py:integer);
 var
  i,j:integer;
 begin
 for i:=1 to 8 do
  for j:=1 to 8 do
   pxl(i+px-1,j+py-1,0);
 end;
function getst(px,py:integer;s,col:byte;d:dt):string;
 var
  x:char;
  i:byte;
  st:string;
  px1:integer;
 begin
 st:='';
 i:=0;
 px1:=px;
 {---------------------------}{first char will not be space}
 repeat
  repeat
   draw2('_',px1,py,col);
   delay(d*4);
   draw2('_',px1,py,0);
   delay(d*4);
   until keypressed;
  x:=readkey;
  if x<>' ' then
   if (i<s) and (ord(x)<>13) and (ord(x)<>8) then
    begin
    draw2(x,px1,py,col);
    st:=st+x;
    i:=i+1;
    px1:=px1+9;
    end;
  until (x<>' ') and (x<>chr(8));
 {---------------------------}
 if i=1 then{if char was writen and not enter}
  repeat
   repeat
    draw2('_',px1,py,col);
    delay(d*4);
    draw2('_',px1,py,0);
    delay(d*4);
    until keypressed;
   x:=readkey;
   if (ord(x)=8) and (px1>px) then
    begin
    bck(px1-9,py);
    px1:=px1-9;
    delete(st,i,1);
    i:=i-1;
    end else
    if (i<s) and (ord(x)<>13) and (ord(x)<>8) and (ord(x)>31) and (ord(x)<123) then
     begin
     draw2(x,px1,py,col);
     st:=st+x;
     i:=i+1;
     px1:=px1+9;
     end;
   until ord(x)=13;
 getst:=st;
 end;
function getnum(px,py:integer;s,col:byte;d:dt):integer;
 var
  x:char;
  i:byte;
  num,px1,a,b:integer;
 begin
 i:=0;
 num:=0;
 px1:=px;
 repeat
 {---------------------------}
  repeat
   draw2('_',px1,py,col);
   delay(d*4);
   draw2('_',px1,py,1);
   delay(d*4);
   until keypressed;
 {---------------------------}
  x:=readkey;
  if (ord(x)=8) and (px1>px) then
   begin
   for a:=1 to 8 do
    for b:=1 to 8 do
     pxl(a+px1-10,b+py-1,1);
   px1:=px1-9;
   num:=num div 10;
   i:=i-1;
   end else
   if i<s then
    if (ord(x)>47) and (ord(x)<58) then
     begin
     draw2(x,px1,py,col);
     num:=num*10+ord(x)-48;
     px1:=px1+9;
     i:=i+1;
     end;
  until ord(x)=13;
 getnum:=num;
 end;
end.